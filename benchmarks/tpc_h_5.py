#!/usr/bin/python3

"""Execute TPC-H query 5.

-- Original TPC-H Query 5
```
select
        n_name,
        sum(l_extendedprice * (1 - l_discount)) as revenue
from
        customer,
        orders,
        lineitem,
        supplier,
        nation,
        region
where
        c_custkey = o_custkey
        and l_orderkey = o_orderkey
        and l_suppkey = s_suppkey
        and c_nationkey = s_nationkey
        and s_nationkey = n_nationkey
        and n_regionkey = r_regionkey
        and r_name = 'ASIA'
        and o_orderdate >= date '1994-01-01'
        and o_orderdate < date '1995-01-01'
group by
        n_name
order by
        revenue desc
```
"""

import sys
from datetime import datetime
from typing import Any, List, Tuple

import pyarrow as pa

sys.path.append("..")
from mlir_pandas.mlir_pandas import DataFrame

import common
from common import DF


# Generated by lingo-db `sql-to-mlir`.
MLIR_MODULE = """
module {
  func.func @main() -> !dsa.table {
    %0 = relalg.basetable  {table_identifier = "customer"} columns: {c_acctbal => @customer::@c_acctbal({type = !db.decimal<15, 2>}), c_address => @customer::@c_address({type = !db.string}), c_comment => @customer::@c_comment({type = !db.string}), c_custkey => @customer::@c_custkey({type = i32}), c_mktsegment => @customer::@c_mktsegment({type = !db.string}), c_name => @customer::@c_name({type = !db.string}), c_nationkey => @customer::@c_nationkey({type = i32}), c_phone => @customer::@c_phone({type = !db.string})}
    %1 = relalg.basetable  {table_identifier = "orders"} columns: {o_clerk => @orders::@o_clerk({type = !db.string}), o_comment => @orders::@o_comment({type = !db.string}), o_custkey => @orders::@o_custkey({type = i32}), o_orderdate => @orders::@o_orderdate({type = !db.date<day>}), o_orderkey => @orders::@o_orderkey({type = i32}), o_orderpriority => @orders::@o_orderpriority({type = !db.string}), o_orderstatus => @orders::@o_orderstatus({type = !db.char<1>}), o_shippriority => @orders::@o_shippriority({type = i32}), o_totalprice => @orders::@o_totalprice({type = !db.decimal<15, 2>})}
    %2 = relalg.crossproduct %0, %1
    %3 = relalg.basetable  {table_identifier = "lineitem"} columns: {l_comment => @lineitem::@l_comment({type = !db.string}), l_commitdate => @lineitem::@l_commitdate({type = !db.date<day>}), l_discount => @lineitem::@l_discount({type = !db.decimal<15, 2>}), l_extendedprice => @lineitem::@l_extendedprice({type = !db.decimal<15, 2>}), l_linenumber => @lineitem::@l_linenumber({type = i32}), l_linestatus => @lineitem::@l_linestatus({type = !db.char<1>}), l_orderkey => @lineitem::@l_orderkey({type = i32}), l_partkey => @lineitem::@l_partkey({type = i32}), l_quantity => @lineitem::@l_quantity({type = !db.decimal<15, 2>}), l_receiptdate => @lineitem::@l_receiptdate({type = !db.date<day>}), l_returnflag => @lineitem::@l_returnflag({type = !db.char<1>}), l_shipdate => @lineitem::@l_shipdate({type = !db.date<day>}), l_shipinstruct => @lineitem::@l_shipinstruct({type = !db.string}), l_shipmode => @lineitem::@l_shipmode({type = !db.string}), l_suppkey => @lineitem::@l_suppkey({type = i32}), l_tax => @lineitem::@l_tax({type = !db.decimal<15, 2>})}
    %4 = relalg.crossproduct %2, %3
    %5 = relalg.basetable  {table_identifier = "supplier"} columns: {s_acctbal => @supplier::@s_acctbal({type = !db.decimal<15, 2>}), s_address => @supplier::@s_address({type = !db.string}), s_comment => @supplier::@s_comment({type = !db.string}), s_name => @supplier::@s_name({type = !db.string}), s_nationkey => @supplier::@s_nationkey({type = i32}), s_phone => @supplier::@s_phone({type = !db.string}), s_suppkey => @supplier::@s_suppkey({type = i32})}
    %6 = relalg.crossproduct %4, %5
    %7 = relalg.basetable  {table_identifier = "nation"} columns: {n_comment => @nation::@n_comment({type = !db.nullable<!db.string>}), n_name => @nation::@n_name({type = !db.string}), n_nationkey => @nation::@n_nationkey({type = i32}), n_regionkey => @nation::@n_regionkey({type = i32})}
    %8 = relalg.crossproduct %6, %7
    %9 = relalg.basetable  {table_identifier = "region"} columns: {r_comment => @region::@r_comment({type = !db.nullable<!db.string>}), r_name => @region::@r_name({type = !db.string}), r_regionkey => @region::@r_regionkey({type = i32})}
    %10 = relalg.crossproduct %8, %9
    %11 = relalg.selection %10 (%arg0: !relalg.tuple){
      %16 = relalg.getcol %arg0 @customer::@c_custkey : i32
      %17 = relalg.getcol %arg0 @orders::@o_custkey : i32
      %18 = db.compare eq %16 : i32, %17 : i32
      %19 = relalg.getcol %arg0 @lineitem::@l_orderkey : i32
      %20 = relalg.getcol %arg0 @orders::@o_orderkey : i32
      %21 = db.compare eq %19 : i32, %20 : i32
      %22 = relalg.getcol %arg0 @lineitem::@l_suppkey : i32
      %23 = relalg.getcol %arg0 @supplier::@s_suppkey : i32
      %24 = db.compare eq %22 : i32, %23 : i32
      %25 = relalg.getcol %arg0 @customer::@c_nationkey : i32
      %26 = relalg.getcol %arg0 @supplier::@s_nationkey : i32
      %27 = db.compare eq %25 : i32, %26 : i32
      %28 = relalg.getcol %arg0 @supplier::@s_nationkey : i32
      %29 = relalg.getcol %arg0 @nation::@n_nationkey : i32
      %30 = db.compare eq %28 : i32, %29 : i32
      %31 = relalg.getcol %arg0 @nation::@n_regionkey : i32
      %32 = relalg.getcol %arg0 @region::@r_regionkey : i32
      %33 = db.compare eq %31 : i32, %32 : i32
      %34 = relalg.getcol %arg0 @region::@r_name : !db.string
      %35 = db.constant("ASIA") : !db.string
      %36 = db.compare eq %34 : !db.string, %35 : !db.string
      %37 = relalg.getcol %arg0 @orders::@o_orderdate : !db.date<day>
      %38 = db.constant("1994-01-01") : !db.date<day>
      %39 = db.compare gte %37 : !db.date<day>, %38 : !db.date<day>
      %40 = relalg.getcol %arg0 @orders::@o_orderdate : !db.date<day>
      %41 = db.constant("1995-01-01") : !db.date<day>
      %42 = db.compare lt %40 : !db.date<day>, %41 : !db.date<day>
      %43 = db.and %18, %21, %24, %27, %30, %33, %36, %39, %42 : i1, i1, i1, i1, i1, i1, i1, i1, i1
      relalg.return %43 : i1
    }
    %12 = relalg.map %11 computes : [@map0::@tmp_attr1({type = !db.decimal<30, 4>})] (%arg0: !relalg.tuple){
      %16 = relalg.getcol %arg0 @lineitem::@l_extendedprice : !db.decimal<15, 2>
      %17 = db.constant(1 : i32) : !db.decimal<15, 2>
      %18 = relalg.getcol %arg0 @lineitem::@l_discount : !db.decimal<15, 2>
      %19 = db.sub %17 : !db.decimal<15, 2>, %18 : !db.decimal<15, 2>
      %20 = db.mul %16 : !db.decimal<15, 2>, %19 : !db.decimal<15, 2>
      relalg.return %20 : !db.decimal<30, 4>
    }
    %13 = relalg.aggregation %12 [@nation::@n_name] computes : [@aggr0::@tmp_attr0({type = !db.decimal<30, 4>})] (%arg0: !relalg.tuplestream,%arg1: !relalg.tuple){
      %16 = relalg.aggrfn sum @map0::@tmp_attr1 %arg0 : !db.decimal<30, 4>
      relalg.return %16 : !db.decimal<30, 4>
    }
    %14 = relalg.sort %13 [(@aggr0::@tmp_attr0,desc)]
    %15 = relalg.materialize %14 [@nation::@n_name,@aggr0::@tmp_attr0] => ["n_name", "revenue"] : !dsa.table
    return %15 : !dsa.table
  }
}
"""


def tpc_h_5(
    df_customer: DF,
    df_orders: DF,
    df_lineitem: DF,
    df_supplier: DF,
    df_nation: DF,
    df_region: DF
) -> Any:
    tmp: DF = df_customer.merge(
        df_orders[(df_orders["o_orderdate"] >= datetime.fromisoformat("1994-01-01"))
                  &(df_orders["o_orderdate"] < datetime.fromisoformat("1995-01-01"))],
        how="inner",
        left_on="c_custkey",
        right_on="o_custkey"
    ).merge(
        df_lineitem,
        how="inner",
        left_on="o_orderkey",
        right_on="l_orderkey"
    ).merge(
        df_supplier,
        how="inner",
        left_on="l_suppkey",
        right_on="s_suppkey"
    ).merge(
        df_nation,
        how="inner",
        left_on="s_nationkey",
        right_on="n_nationkey"
    ).merge(
        df_region[df_region["r_name"] == "ASIA"],
        how="inner",
        left_on="n_regionkey",
        right_on="r_regionkey"
    )
    tmp = tmp[(tmp["c_nationkey"] == tmp["s_nationkey"])]
    tmp["revenue"] = tmp["l_extendedprice"] * ((tmp["l_discount"] * (-1.0)) + 1.0)
    return tmp.groupby("n_name", as_index=False)\
        .agg(revenue=("revenue", "sum"))\
        .sort_values("revenue", ascending=False)


# UserWarning: `GroupBy.aggregate(**dictionary_renaming_aggregation)` implementation has mismatches with pandas:
# intersection of the columns to aggregate and 'by' is not yet supported when 'as_index=False', columns with group names of the intersection will not be presented in the result. To achieve the desired result rewrite the original code from:
# df.groupby('by_column', as_index=False).agg(agg_func=('by_column', agg_func))
# to the:
# df.groupby('by_column').agg(agg_func=('by_column', agg_func)).reset_index().
def tpc_h_5_modin_adaption(
    df_customer: DF,
    df_orders: DF,
    df_lineitem: DF,
    df_supplier: DF,
    df_nation: DF,
    df_region: DF
) -> Any:
    tmp: DF = df_customer.merge(
        df_orders[(df_orders["o_orderdate"] >= datetime.fromisoformat("1994-01-01"))
                  &(df_orders["o_orderdate"] < datetime.fromisoformat("1995-01-01"))],
        how="inner",
        left_on="c_custkey",
        right_on="o_custkey"
    ).merge(
        df_lineitem,
        how="inner",
        left_on="o_orderkey",
        right_on="l_orderkey"
    ).merge(
        df_supplier,
        how="inner",
        left_on="l_suppkey",
        right_on="s_suppkey"
    ).merge(
        df_nation,
        how="inner",
        left_on="s_nationkey",
        right_on="n_nationkey"
    ).merge(
        df_region[df_region["r_name"] == "ASIA"],
        how="inner",
        left_on="n_regionkey",
        right_on="r_regionkey"
    )
    tmp = tmp[(tmp["c_nationkey"] == tmp["s_nationkey"])]
    tmp["revenue"] = (tmp["l_extendedprice"] * ((tmp["l_discount"] * (-1.0)) + 1.0))
    return tmp.groupby("n_name")\
        .agg(revenue=("revenue", "sum"))\
        .reset_index()\
        .sort_values("revenue", ascending=False)


def tpc_h_5_mlir(
    customer: pa.Table,
    orders: pa.Table,
    lineitem: pa.Table,
    supplier: pa.Table,
    nation: pa.Table,
    region: pa.Table
) -> Tuple[List[Tuple[str, int]], Any]:
    return common.execute_mlir(
        [customer, orders, lineitem, supplier, nation, region],
        ["customer", "orders", "lineitem", "supplier", "nation", "region"],
        MLIR_MODULE
    )


def tpc_h_5_mlir_pandas(
    customer: pa.Table,
    orders: pa.Table,
    lineitem: pa.Table,
    supplier: pa.Table,
    nation: pa.Table,
    region: pa.Table
) -> Tuple[List[Tuple[str, int]], Any]:
    df_customer: DataFrame = common.make_mlir_pandas(customer)
    df_orders: DataFrame = common.make_mlir_pandas(orders)
    df_lineitem: DataFrame = common.make_mlir_pandas(lineitem)
    df_supplier: DataFrame = common.make_mlir_pandas(supplier)
    df_nation: DataFrame = common.make_mlir_pandas(nation)
    df_region: DataFrame = common.make_mlir_pandas(region)
    first_ts: int = min(
        df_customer._timestamps[0][1],
        df_orders._timestamps[0][1],
        df_lineitem._timestamps[0][1],
        df_supplier._timestamps[0][1],
        df_nation._timestamps[0][1],
        df_region._timestamps[0][1],
    )
    result: Any = tpc_h_5(df_customer, df_orders, df_lineitem, df_supplier, df_nation, df_region)
    assert(result._timestamps[0][1] == first_ts)
    result_materialized: Any = result._mock
    return (result._timestamps, result_materialized)


def tpc_h_5_modin(
    df_customer: DF,
    df_orders: DF,
    df_lineitem: DF,
    df_supplier: DF,
    df_nation: DF,
    df_region: DF
) -> Tuple[List[Tuple[str, int]], Any]:
    return common.execute_modin(
        tpc_h_5_modin_adaption,
        [df_customer, df_orders, df_lineitem, df_supplier, df_nation, df_region]
    )


def run() -> common.TPCHResult:
    return common.run(
        "TPC-H 5",
        [
            "./tpch_data/customer.arrow",
            "./tpch_data/orders.arrow",
            "./tpch_data/lineitem.arrow",
            "./tpch_data/supplier.arrow",
            "./tpch_data/nation.arrow",
            "./tpch_data/region.arrow"
        ],
        [
            [
                ("c_custkey",    pa.int64()   ),
                ("c_name",       pa.string()  ),
                ("c_address",    pa.string()  ),
                ("c_nationkey",  pa.int64()   ),
                ("c_phone",      pa.string()  ),
                ("c_acctbal",    pa.float64() ),
                ("c_mktsegment", pa.string()  ),
                ("c_comment",    pa.string()  ),
            ],
            [
                ("o_orderkey",      pa.int64()         ),
                ("o_custkey",       pa.int64()         ),
                ("o_orderstatus",   pa.string()        ),
                ("o_totalprice",    pa.float64()       ),
                ("o_orderdate",     pa.timestamp("ns") ),
                ("o_orderpriority", pa.string()        ),
                ("o_clerk",         pa.string()        ),
                ("o_shippriority",  pa.int64()         ),
                ("o_comment",       pa.string()        ),
            ],
            [
                ("l_orderkey",      pa.int64()         ),
                ("l_partkey",       pa.int64()         ),
                ("l_suppkey",       pa.int64()         ),
                ("l_linenumber",    pa.int64()         ),
                ("l_quantity",      pa.float64()       ),
                ("l_extendedprice", pa.float64()       ),
                ("l_discount",      pa.float64()       ),
                ("l_tax",           pa.float64()       ),
                ("l_returnflag",    pa.string()        ),
                ("l_linestatus",    pa.string()        ),
                ("l_shipdate",      pa.timestamp("ns") ),
                ("l_commitdate",    pa.timestamp("ns") ),
                ("l_receiptdate",   pa.timestamp("ns") ),
                ("l_shipinstruct",  pa.string()        ),
                ("l_shipmode",      pa.string()        ),
                ("l_comment",       pa.string()        ),
            ],
            [
                ("s_suppkey",   pa.int64()   ),
                ("s_name",      pa.string()  ),
                ("s_address",   pa.string()  ),
                ("s_nationkey", pa.int64()   ),
                ("s_phone",     pa.string()  ),
                ("s_acctbal",   pa.float64() ),
                ("s_comment",   pa.string()  ),
            ],
            [
                ("n_nationkey", pa.int64()  ),
                ("n_name",      pa.string() ),
                ("n_regionkey", pa.int64()  ),
                ("n_comment",   pa.string() ),
            ],
            [
                ("r_regionkey", pa.int64()  ),
                ("r_name",      pa.string() ),
                ("r_comment",   pa.string() ),
            ],
        ],
        tpc_h_5_mlir,
        tpc_h_5_mlir_pandas,
        tpc_h_5,
        tpc_h_5_modin
    )


if __name__ == "__main__":
    print(run())
