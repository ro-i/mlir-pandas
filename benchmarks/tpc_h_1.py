#!/usr/bin/python3

"""Execute TPC-H query 1.

-- Original TPC-H Query 1
```
select
        l_returnflag,
        l_linestatus,
        sum(l_quantity) as sum_qty,
        sum(l_extendedprice) as sum_base_price,
        sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
        sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
        avg(l_quantity) as avg_qty,
        avg(l_extendedprice) as avg_price,
        avg(l_discount) as avg_disc,
        count(*) as count_order
from
        lineitem
where
        l_shipdate <= date '1998-12-01' - interval '90' day
group by
        l_returnflag,
        l_linestatus
order by
        l_returnflag,
        l_linestatus
```
"""

import sys
from datetime import datetime, timedelta
from typing import Any, List, Tuple

import pyarrow as pa

sys.path.append("..")
from mlir_pandas.mlir_pandas import DataFrame

import common
from common import DF


# Generated by lingo-db `sql-to-mlir`.
MLIR_MODULE = """
module {
  func.func @main() -> !dsa.table {
    %0 = relalg.basetable  {table_identifier = "lineitem"} columns: {l_comment => @lineitem::@l_comment({type = !db.string}), l_commitdate => @lineitem::@l_commitdate({type = !db.date<day>}), l_discount => @lineitem::@l_discount({type = !db.decimal<15, 2>}), l_extendedprice => @lineitem::@l_extendedprice({type = !db.decimal<15, 2>}), l_linenumber => @lineitem::@l_linenumber({type = i32}), l_linestatus => @lineitem::@l_linestatus({type = !db.char<1>}), l_orderkey => @lineitem::@l_orderkey({type = i32}), l_partkey => @lineitem::@l_partkey({type = i32}), l_quantity => @lineitem::@l_quantity({type = !db.decimal<15, 2>}), l_receiptdate => @lineitem::@l_receiptdate({type = !db.date<day>}), l_returnflag => @lineitem::@l_returnflag({type = !db.char<1>}), l_shipdate => @lineitem::@l_shipdate({type = !db.date<day>}), l_shipinstruct => @lineitem::@l_shipinstruct({type = !db.string}), l_shipmode => @lineitem::@l_shipmode({type = !db.string}), l_suppkey => @lineitem::@l_suppkey({type = i32}), l_tax => @lineitem::@l_tax({type = !db.decimal<15, 2>})}
    %1 = relalg.selection %0 (%arg0: !relalg.tuple){
      %6 = relalg.getcol %arg0 @lineitem::@l_shipdate : !db.date<day>
      %7 = db.constant("1998-12-01") : !db.date<day>
      %8 = db.constant("90days") : !db.interval<daytime>
      %9 = db.runtime_call "DateSubtract"(%7, %8) : (!db.date<day>, !db.interval<daytime>) -> !db.date<day>
      %10 = db.compare lte %6 : !db.date<day>, %9 : !db.date<day>
      relalg.return %10 : i1
    }
    %2 = relalg.map %1 computes : [@map0::@tmp_attr5({type = !db.decimal<45, 6>}),@map0::@tmp_attr3({type = !db.decimal<30, 4>})] (%arg0: !relalg.tuple){
      %6 = relalg.getcol %arg0 @lineitem::@l_extendedprice : !db.decimal<15, 2>
      %7 = db.constant(1 : i32) : !db.decimal<15, 2>
      %8 = relalg.getcol %arg0 @lineitem::@l_discount : !db.decimal<15, 2>
      %9 = db.sub %7 : !db.decimal<15, 2>, %8 : !db.decimal<15, 2>
      %10 = db.mul %6 : !db.decimal<15, 2>, %9 : !db.decimal<15, 2>
      %11 = db.constant(1 : i32) : !db.decimal<15, 2>
      %12 = relalg.getcol %arg0 @lineitem::@l_tax : !db.decimal<15, 2>
      %13 = db.add %11 : !db.decimal<15, 2>, %12 : !db.decimal<15, 2>
      %14 = db.mul %10 : !db.decimal<30, 4>, %13 : !db.decimal<15, 2>
      %15 = relalg.getcol %arg0 @lineitem::@l_extendedprice : !db.decimal<15, 2>
      %16 = db.constant(1 : i32) : !db.decimal<15, 2>
      %17 = relalg.getcol %arg0 @lineitem::@l_discount : !db.decimal<15, 2>
      %18 = db.sub %16 : !db.decimal<15, 2>, %17 : !db.decimal<15, 2>
      %19 = db.mul %15 : !db.decimal<15, 2>, %18 : !db.decimal<15, 2>
      relalg.return %14, %19 : !db.decimal<45, 6>, !db.decimal<30, 4>
    }
    %3 = relalg.aggregation %2 [@lineitem::@l_returnflag,@lineitem::@l_linestatus] computes : [@aggr0::@tmp_attr9({type = i64}),@aggr0::@tmp_attr7({type = !db.decimal<15, 2>}),@aggr0::@tmp_attr4({type = !db.decimal<45, 6>}),@aggr0::@tmp_attr2({type = !db.decimal<30, 4>}),@aggr0::@tmp_attr6({type = !db.decimal<15, 2>}),@aggr0::@tmp_attr1({type = !db.decimal<15, 2>}),@aggr0::@tmp_attr8({type = !db.decimal<15, 2>}),@aggr0::@tmp_attr0({type = !db.decimal<15, 2>})] (%arg0: !relalg.tuplestream,%arg1: !relalg.tuple){
      %6 = relalg.count %arg0
      %7 = relalg.aggrfn avg @lineitem::@l_extendedprice %arg0 : !db.decimal<15, 2>
      %8 = relalg.aggrfn sum @map0::@tmp_attr5 %arg0 : !db.decimal<45, 6>
      %9 = relalg.aggrfn sum @map0::@tmp_attr3 %arg0 : !db.decimal<30, 4>
      %10 = relalg.aggrfn avg @lineitem::@l_quantity %arg0 : !db.decimal<15, 2>
      %11 = relalg.aggrfn sum @lineitem::@l_extendedprice %arg0 : !db.decimal<15, 2>
      %12 = relalg.aggrfn avg @lineitem::@l_discount %arg0 : !db.decimal<15, 2>
      %13 = relalg.aggrfn sum @lineitem::@l_quantity %arg0 : !db.decimal<15, 2>
      relalg.return %6, %7, %8, %9, %10, %11, %12, %13 : i64, !db.decimal<15, 2>, !db.decimal<45, 6>, !db.decimal<30, 4>, !db.decimal<15, 2>, !db.decimal<15, 2>, !db.decimal<15, 2>, !db.decimal<15, 2>
    }
    %4 = relalg.sort %3 [(@lineitem::@l_returnflag,asc),(@lineitem::@l_linestatus,asc)]
    %5 = relalg.materialize %4 [@lineitem::@l_returnflag,@lineitem::@l_linestatus,@aggr0::@tmp_attr0,@aggr0::@tmp_attr1,@aggr0::@tmp_attr2,@aggr0::@tmp_attr4,@aggr0::@tmp_attr6,@aggr0::@tmp_attr7,@aggr0::@tmp_attr8,@aggr0::@tmp_attr9] => ["l_returnflag", "l_linestatus", "sum_qty", "sum_base_price", "sum_disc_price", "sum_charge", "avg_qty", "avg_price", "avg_disc", "count_order"] : !dsa.table
    return %5 : !dsa.table
  }
}
"""


def tpc_h_1(df_lineitem: DF) -> Any:
    tmp: DF = df_lineitem[
        df_lineitem["l_shipdate"] <= (datetime.fromisoformat("1998-12-01") - timedelta(days=90.0))
    ].copy(deep=False)
    tmp["disc_price"] = tmp["l_extendedprice"] * ((tmp["l_discount"] * (-1.0)) + 1.0)
    tmp["charge"] = tmp["disc_price"] * (tmp["l_tax"] + 1.0)
    tmp = tmp.groupby(
        ["l_returnflag", "l_linestatus"], as_index=False
    ).agg(
        sum_qty=("l_quantity", "sum"),
        sum_base_price=("l_extendedprice", "sum"),
        sum_disc_price=("disc_price", "sum"),
        sum_charge=("charge", "sum"),
        avg_qty=("l_quantity", "mean"),
        avg_price=("l_extendedprice", "mean"),
        avg_disc=("l_discount", "mean"),
        count_order=("l_returnflag", "count")
    )
    return tmp


# UserWarning: `GroupBy.aggregate(**dictionary_renaming_aggregation)` implementation has mismatches with pandas:
# intersection of the columns to aggregate and 'by' is not yet supported when 'as_index=False', columns with group names of the intersection will not be presented in the result. To achieve the desired result rewrite the original code from:
# df.groupby('by_column', as_index=False).agg(agg_func=('by_column', agg_func))
# to the:
# df.groupby('by_column').agg(agg_func=('by_column', agg_func)).reset_index().
def tpc_h_1_modin_adaption(df_lineitem: DF) -> Any:
    tmp: DF = df_lineitem[
        df_lineitem["l_shipdate"] <= (datetime.fromisoformat("1998-12-01") - timedelta(days=90.0))
    ].copy(deep=False)
    tmp["disc_price"] = tmp["l_extendedprice"] * ((tmp["l_discount"] * (-1.0)) + 1.0)
    tmp["charge"] = tmp["disc_price"] * (tmp["l_tax"] + 1.0)
    tmp = tmp.groupby(
        ["l_returnflag", "l_linestatus"]
    ).agg(
        sum_qty=("l_quantity", "sum"),
        sum_base_price=("l_extendedprice", "sum"),
        sum_disc_price=("disc_price", "sum"),
        sum_charge=("charge", "sum"),
        avg_qty=("l_quantity", "mean"),
        avg_price=("l_extendedprice", "mean"),
        avg_disc=("l_discount", "mean"),
        count_order=("l_returnflag", "count")
    ).reset_index()
    return tmp


def tpc_h_1_mlir(table: pa.Table) -> Tuple[List[Tuple[str, int]], Any]:
    return common.execute_mlir([table], ["lineitem"], MLIR_MODULE)


def tpc_h_1_mlir_pandas(table: pa.Table) -> Tuple[List[Tuple[str, int]], Any]:
    df_lineitem: DataFrame = common.make_mlir_pandas(table)
    first_ts: int = df_lineitem._timestamps[0][1]
    result: Any = tpc_h_1(df_lineitem)
    assert(result._timestamps[0][1] == first_ts)
    result_materialized: Any = result._mock
    return (result._timestamps, result_materialized)


def tpc_h_1_modin(df_lineitem: DF) -> Tuple[List[Tuple[str, int]], Any]:
    return common.execute_modin(tpc_h_1_modin_adaption, [df_lineitem])


def run() -> common.TPCHResult:
    return common.run(
        "TPC-H 1",
        ["./tpch_data/lineitem.arrow"],
        [[
            ("l_orderkey",      pa.int64()         ),
            ("l_partkey",       pa.int64()         ),
            ("l_suppkey",       pa.int64()         ),
            ("l_linenumber",    pa.int64()         ),
            ("l_quantity",      pa.float64()       ),
            ("l_extendedprice", pa.float64()       ),
            ("l_discount",      pa.float64()       ),
            ("l_tax",           pa.float64()       ),
            ("l_returnflag",    pa.string()        ),
            ("l_linestatus",    pa.string()        ),
            ("l_shipdate",      pa.timestamp("ns") ),
            ("l_commitdate",    pa.timestamp("ns") ),
            ("l_receiptdate",   pa.timestamp("ns") ),
            ("l_shipinstruct",  pa.string()        ),
            ("l_shipmode",      pa.string()        ),
            ("l_comment",       pa.string()        ),
        ]],
        tpc_h_1_mlir,
        tpc_h_1_mlir_pandas,
        tpc_h_1,
        tpc_h_1_modin
    )


if __name__ == "__main__":
    print(run())
